"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5745],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return s}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),u=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},m=function(e){var n=u(e.components);return a.createElement(i.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},b=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),b=u(t),s=r,d=b["".concat(i,".").concat(s)]||b[s]||p[s]||o;return t?a.createElement(d,c(c({ref:n},m),{},{components:t})):a.createElement(d,c({ref:n},m))}));function s(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,c=new Array(o);c[0]=b;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var u=2;u<o;u++)c[u]=t[u];return a.createElement.apply(null,c)}return a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},9028:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return i},default:function(){return s},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var a=t(7462),r=t(3366),o=(t(7294),t(3905)),c=["components"],l={description:"Tutorial on how to read account balances from the blockchain with Go."},i="Account Balances",u={unversionedId:"en/account-balance/README",id:"en/account-balance/README",title:"Account Balances",description:"Tutorial on how to read account balances from the blockchain with Go.",source:"@site/docs/en/account-balance/README.md",sourceDirName:"en/account-balance",slug:"/en/account-balance/",permalink:"/ethereum-development-with-go-book/docs/en/account-balance/",editUrl:"https://github.com/mhxw/ethereum-development-with-go-book/tree/dev/docs/en/account-balance/README.md",tags:[],version:"current",frontMatter:{description:"Tutorial on how to read account balances from the blockchain with Go."},sidebar:"en",previous:{title:"Accounts",permalink:"/ethereum-development-with-go-book/docs/en/accounts/"},next:{title:"Account Token Balances",permalink:"/ethereum-development-with-go-book/docs/en/account-balance-token/"}},m={},p=[{value:"Pending balance",id:"pending-balance",level:4},{value:"Full code",id:"full-code",level:3}],b={toc:p};function s(e){var n=e.components,t=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"account-balances"},"Account Balances"),(0,o.kt)("p",null,"Reading the balance of an account is pretty simple; call the ",(0,o.kt)("inlineCode",{parentName:"p"},"BalanceAt")," method of the client passing it the account address and optional block number. Setting ",(0,o.kt)("inlineCode",{parentName:"p"},"nil")," as the block number will return the latest balance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'account := common.HexToAddress("0x71c7656ec7ab88b098defb751b7401b5f6d8976f")\nbalance, err := client.BalanceAt(context.Background(), account, nil)\nif err != nil {\n  log.Fatal(err)\n}\n\nfmt.Println(balance) // 25893180161173005034\n')),(0,o.kt)("p",null,"Passing the block number let's you read the account balance at the time of that block. The block number must be a ",(0,o.kt)("inlineCode",{parentName:"p"},"big.Int"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"blockNumber := big.NewInt(5532993)\nbalance, err := client.BalanceAt(context.Background(), account, blockNumber)\nif err != nil {\n  log.Fatal(err)\n}\n\nfmt.Println(balance) // 25729324269165216042\n")),(0,o.kt)("p",null,"Numbers in ethereum are dealt using the smallest possible unit because they're fixed-point precision, which in the case of ETH it's ",(0,o.kt)("em",{parentName:"p"},"wei"),". To read the ETH value you must do the calculation ",(0,o.kt)("inlineCode",{parentName:"p"},"wei / 10^18"),". Because we're dealing with big numbers we'll have to import the native Go ",(0,o.kt)("inlineCode",{parentName:"p"},"math")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"math/big")," packages. Here's how'd you do the conversion."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"fbalance := new(big.Float)\nfbalance.SetString(balance.String())\nethValue := new(big.Float).Quo(fbalance, big.NewFloat(math.Pow10(18)))\n\nfmt.Println(ethValue) // 25.729324269165216041\n")),(0,o.kt)("h4",{id:"pending-balance"},"Pending balance"),(0,o.kt)("p",null,"Sometimes you'll want to know what the pending account balance is, for example after submitting or waiting for a transaction to be confirmed. The client provides a similar method to ",(0,o.kt)("inlineCode",{parentName:"p"},"BalanceAt")," called ",(0,o.kt)("inlineCode",{parentName:"p"},"PendingBalanceAt")," which accepts the account address as a parameter."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"pendingBalance, err := client.PendingBalanceAt(context.Background(), account)\nfmt.Println(pendingBalance) // 25729324269165216042\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"full-code"},"Full code"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/account_balance.go"},"account_balance.go")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "math"\n    "math/big"\n\n    "github.com/ethereum/go-ethereum/common"\n    "github.com/ethereum/go-ethereum/ethclient"\n)\n\nfunc main() {\n    client, err := ethclient.Dial("https://cloudflare-eth.com")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    account := common.HexToAddress("0x71c7656ec7ab88b098defb751b7401b5f6d8976f")\n    balance, err := client.BalanceAt(context.Background(), account, nil)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(balance) // 25893180161173005034\n\n    blockNumber := big.NewInt(5532993)\n    balanceAt, err := client.BalanceAt(context.Background(), account, blockNumber)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(balanceAt) // 25729324269165216042\n\n    fbalance := new(big.Float)\n    fbalance.SetString(balanceAt.String())\n    ethValue := new(big.Float).Quo(fbalance, big.NewFloat(math.Pow10(18)))\n    fmt.Println(ethValue) // 25.729324269165216041\n\n    pendingBalance, err := client.PendingBalanceAt(context.Background(), account)\n    fmt.Println(pendingBalance) // 25729324269165216042\n}\n')))}s.isMDXComponent=!0}}]);