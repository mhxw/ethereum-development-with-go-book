"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3646],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4328:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],c={description:"Tutorial on how to generate Ethereum wallets with Go."},l="Generating New Wallets",p={unversionedId:"en/wallet-generate/README",id:"en/wallet-generate/README",title:"Generating New Wallets",description:"Tutorial on how to generate Ethereum wallets with Go.",source:"@site/docs/en/wallet-generate/README.md",sourceDirName:"en/wallet-generate",slug:"/en/wallet-generate/",permalink:"/ethereum-development-with-go-book/docs/en/wallet-generate/",editUrl:"https://github.com/mhxw/ethereum-development-with-go-book/tree/dev/docs/en/wallet-generate/README.md",tags:[],version:"current",frontMatter:{description:"Tutorial on how to generate Ethereum wallets with Go."},sidebar:"en",previous:{title:"Account Token Balances",permalink:"/ethereum-development-with-go-book/docs/en/account-balance-token/"},next:{title:"Keystores",permalink:"/ethereum-development-with-go-book/docs/en/keystore/"}},s={},u=[{value:"Full code",id:"full-code",level:3}],d={toc:u};function h(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"generating-new-wallets"},"Generating New Wallets"),(0,o.kt)("p",null,"To generate a new wallet first we need to import the go-ethereum ",(0,o.kt)("inlineCode",{parentName:"p"},"crypto")," package that provides the ",(0,o.kt)("inlineCode",{parentName:"p"},"GenerateKey")," method for generating a random private key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"privateKey, err := crypto.GenerateKey()\nif err != nil {\n  log.Fatal(err)\n}\n")),(0,o.kt)("p",null,"Then we can convert it to bytes by importing the golang ",(0,o.kt)("inlineCode",{parentName:"p"},"crypto/ecdsa")," package and using the ",(0,o.kt)("inlineCode",{parentName:"p"},"FromECDSA")," method."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"privateKeyBytes := crypto.FromECDSA(privateKey)\n")),(0,o.kt)("p",null,"We can now convert it to a hexadecimal string by using the go-ethereum ",(0,o.kt)("inlineCode",{parentName:"p"},"hexutil")," package which provides the ",(0,o.kt)("inlineCode",{parentName:"p"},"Encode")," method which takes a byte slice. Then we strip off the ",(0,o.kt)("inlineCode",{parentName:"p"},"0x")," after it's hex encoded."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"fmt.Println(hexutil.Encode(privateKeyBytes)[2:]) // fad9c8855b740a0b7ed4c221dbad0f33a83a49cad6b3fe8d5817ac83d38b6a19\n")),(0,o.kt)("p",null,"This is the private key which is used for signing transactions and is to be treated like a password and never be shared, since who ever is in possesion of it will have access to all your funds."),(0,o.kt)("p",null,"Since the public key is derived from the private key, go-ethereum's crypto private key has a ",(0,o.kt)("inlineCode",{parentName:"p"},"Public")," method that will return the public key."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"publicKey := privateKey.Public()\n")),(0,o.kt)("p",null,"Converting it to hex is a similar process that we went through with the private key. We strip off the ",(0,o.kt)("inlineCode",{parentName:"p"},"0x")," and the first 2 characters ",(0,o.kt)("inlineCode",{parentName:"p"},"04")," which is always the EC prefix and is not required."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)\nif !ok {\n  log.Fatal("cannot assert type: publicKey is not of type *ecdsa.PublicKey")\n}\n\npublicKeyBytes := crypto.FromECDSAPub(publicKeyECDSA)\nfmt.Println(hexutil.Encode(publicKeyBytes)[4:]) // 9a7df67f79246283fdc93af76d4f8cdd62c4886e8cd870944e817dd0b97934fdd7719d0810951e03418205868a5c1b40b192451367f28e0088dd75e15de40c05\n')),(0,o.kt)("p",null,"Now that we have the public key we can easily generate the public address which is what you're used to seeing. In order to do that, the go-ethereum crypto package has a ",(0,o.kt)("inlineCode",{parentName:"p"},"PubkeyToAddress")," method which accepts an ECDSA public key, and returns the public address."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"address := crypto.PubkeyToAddress(*publicKeyECDSA).Hex()\nfmt.Println(address) // 0x96216849c49358B10257cb55b28eA603c874b05E\n")),(0,o.kt)("p",null,"The public address is simply the Keccak-256 hash of the public key, and then we take the last 40 characters (20 bytes) and prefix it with ",(0,o.kt)("inlineCode",{parentName:"p"},"0x"),". Here's how you can do it manually using the ",(0,o.kt)("inlineCode",{parentName:"p"},"crypto/sha3")," keccak256 function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"hash := sha3.NewLegacyKeccak256()\nhash.Write(publicKeyBytes[1:])\nfmt.Println(hexutil.Encode(hash.Sum(nil)[12:])) // 0x96216849c49358b10257cb55b28ea603c874b05e\n")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"full-code"},"Full code"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/wallet_generate.go"},"wallet_generate.go")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "crypto/ecdsa"\n    "fmt"\n    "log"\n\n    "github.com/ethereum/go-ethereum/common/hexutil"\n    "github.com/ethereum/go-ethereum/crypto"\n    "golang.org/x/crypto/sha3"\n)\n\nfunc main() {\n    privateKey, err := crypto.GenerateKey()\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    privateKeyBytes := crypto.FromECDSA(privateKey)\n    fmt.Println(hexutil.Encode(privateKeyBytes)[2:]) // fad9c8855b740a0b7ed4c221dbad0f33a83a49cad6b3fe8d5817ac83d38b6a19\n\n    publicKey := privateKey.Public()\n    publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)\n    if !ok {\n        log.Fatal("cannot assert type: publicKey is not of type *ecdsa.PublicKey")\n    }\n\n    publicKeyBytes := crypto.FromECDSAPub(publicKeyECDSA)\n    fmt.Println(hexutil.Encode(publicKeyBytes)[4:]) // 9a7df67f79246283fdc93af76d4f8cdd62c4886e8cd870944e817dd0b97934fdd7719d0810951e03418205868a5c1b40b192451367f28e0088dd75e15de40c05\n\n    address := crypto.PubkeyToAddress(*publicKeyECDSA).Hex()\n    fmt.Println(address) // 0x96216849c49358B10257cb55b28eA603c874b05E\n\n    hash := sha3.NewLegacyKeccak256()\n    hash.Write(publicKeyBytes[1:])\n    fmt.Println(hexutil.Encode(hash.Sum(nil)[12:])) // 0x96216849c49358b10257cb55b28ea603c874b05e\n}\n')))}h.isMDXComponent=!0}}]);