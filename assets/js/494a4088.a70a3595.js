"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2099],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(n),f=a,b=p["".concat(s,".").concat(f)]||p[f]||u[f]||o;return n?r.createElement(b,c(c({ref:t},d),{},{components:n})):r.createElement(b,c({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6020:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),c=["components"],i={description:"Tutorial on how to send a raw Ethereum transaction with Go."},s="Send Raw Transaction",l={unversionedId:"en/transaction-raw-send/README",id:"en/transaction-raw-send/README",title:"Send Raw Transaction",description:"Tutorial on how to send a raw Ethereum transaction with Go.",source:"@site/docs/en/transaction-raw-send/README.md",sourceDirName:"en/transaction-raw-send",slug:"/en/transaction-raw-send/",permalink:"/ethereum-development-with-go-book/docs/en/transaction-raw-send/",editUrl:"https://github.com/mhxw/ethereum-development-with-go-book/tree/dev/docs/en/transaction-raw-send/README.md",tags:[],version:"current",frontMatter:{description:"Tutorial on how to send a raw Ethereum transaction with Go."},sidebar:"en",previous:{title:"Create Raw Transaction",permalink:"/ethereum-development-with-go-book/docs/en/transaction-raw-create/"},next:{title:"Smart Contracts",permalink:"/ethereum-development-with-go-book/docs/en/smart-contracts/"}},d={},u=[{value:"Full code",id:"full-code",level:3}],p={toc:u};function f(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"send-raw-transaction"},"Send Raw Transaction"),(0,o.kt)("p",null,"In the ",(0,o.kt)("a",{parentName:"p",href:"../transaction-raw-create"},"previous section")," we learned how to create a raw transaction. Now we'll learn how to broadcast it to the Ethereum network in order for it to get processed and mined."),(0,o.kt)("p",null,"First decode the raw transaction hex to bytes format."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'rawTx := "f86d8202b28477359400825208944592d8f8d7b001e72cb26a73e4fa1806a51ac79d880de0b6b3a7640000802ca05924bde7ef10aa88db9c66dd4f5fb16b46dff2319b9968be983118b57bb50562a001b24b31010004f13d9a26b320845257a6cfc2bf819a3d55e3fc86263c5f0772"\n\nrawTxBytes, err := hex.DecodeString(rawTx)\n')),(0,o.kt)("p",null,"Now initialize a new ",(0,o.kt)("inlineCode",{parentName:"p"},"types.Transaction")," pointer and call ",(0,o.kt)("inlineCode",{parentName:"p"},"DecodeBytes")," from the go-ethereum ",(0,o.kt)("inlineCode",{parentName:"p"},"rlp")," package passing it the raw transaction bytes and the pointer to the ethereum transaction type. RLP is an encoding method used by Ethereum to serialized and derialized data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"tx := new(types.Transaction)\nrlp.DecodeBytes(rawTxBytes, &tx)\n")),(0,o.kt)("p",null,"Now we can easily broadcast the transaction with our ethereum client."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'err := client.SendTransaction(context.Background(), tx)\nif err != nil {\n  log.Fatal(err)\n}\n\nfmt.Printf("tx sent: %s", tx.Hash().Hex()) // tx sent: 0xc429e5f128387d224ba8bed6885e86525e14bfdc2eb24b5e9c3351a1176fd81f\n')),(0,o.kt)("p",null,"You can see the transaction on etherscan: ",(0,o.kt)("a",{parentName:"p",href:"https://rinkeby.etherscan.io/tx/0xc429e5f128387d224ba8bed6885e86525e14bfdc2eb24b5e9c3351a1176fd81f"},"https://rinkeby.etherscan.io/tx/0xc429e5f128387d224ba8bed6885e86525e14bfdc2eb24b5e9c3351a1176fd81f")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"full-code"},"Full code"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/transaction_raw_send.go"},"transaction_raw_sendreate.go")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "encoding/hex"\n    "fmt"\n    "log"\n\n    "github.com/ethereum/go-ethereum/core/types"\n    "github.com/ethereum/go-ethereum/ethclient"\n    "github.com/ethereum/go-ethereum/rlp"\n)\n\nfunc main() {\n    client, err := ethclient.Dial("https://rinkeby.infura.io")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    rawTx := "f86d8202b28477359400825208944592d8f8d7b001e72cb26a73e4fa1806a51ac79d880de0b6b3a7640000802ca05924bde7ef10aa88db9c66dd4f5fb16b46dff2319b9968be983118b57bb50562a001b24b31010004f13d9a26b320845257a6cfc2bf819a3d55e3fc86263c5f0772"\n\n    rawTxBytes, err := hex.DecodeString(rawTx)\n\n    tx := new(types.Transaction)\n    rlp.DecodeBytes(rawTxBytes, &tx)\n\n    err = client.SendTransaction(context.Background(), tx)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf("tx sent: %s", tx.Hash().Hex()) // tx sent: 0xc429e5f128387d224ba8bed6885e86525e14bfdc2eb24b5e9c3351a1176fd81f\n}\n')))}f.isMDXComponent=!0}}]);