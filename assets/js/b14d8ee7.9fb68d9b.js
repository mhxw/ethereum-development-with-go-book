"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3876],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),y=u(n),g=a,m=y["".concat(l,".").concat(g)]||y[g]||p[g]||i;return n?r.createElement(m,o(o({ref:t},s),{},{components:n})):r.createElement(m,o({ref:t},s))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=y;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},1380:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return p}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],c={"\u6982\u8ff0":"\u7528Go\u6765\u9a8c\u8bc1\u7b7e\u540d\u7684\u6559\u7a0b\u3002"},l="\u9a8c\u8bc1\u7b7e\u540d",u={unversionedId:"zh/signature-verify/README",id:"zh/signature-verify/README",title:"\u9a8c\u8bc1\u7b7e\u540d",description:"\u5728\u4e0a\u4e2a\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528\u79c1\u94a5\u5bf9\u4e00\u6bb5\u6570\u636e\u8fdb\u884c\u7b7e\u540d\u4ee5\u751f\u6210\u7b7e\u540d\u3002 \u73b0\u5728\u6211\u4eec\u5c06\u5b66\u4e60\u5982\u4f55\u9a8c\u8bc1\u7b7e\u540d\u7684\u771f\u5b9e\u6027\u3002",source:"@site/docs/zh/signature-verify/README.md",sourceDirName:"zh/signature-verify",slug:"/zh/signature-verify/",permalink:"/ethereum-development-with-go-book/docs/zh/signature-verify/",editUrl:"https://github.com/mhxw/ethereum-development-with-go-book/tree/dev/docs/zh/signature-verify/README.md",tags:[],version:"current",frontMatter:{"\u6982\u8ff0":"\u7528Go\u6765\u9a8c\u8bc1\u7b7e\u540d\u7684\u6559\u7a0b\u3002"},sidebar:"zh",previous:{title:"\u751f\u6210\u4e00\u4e2a\u7b7e\u540d",permalink:"/ethereum-development-with-go-book/docs/zh/signature-generate/"},next:{title:"Testing",permalink:"/ethereum-development-with-go-book/docs/zh/test/"}},s={},p=[{value:"\u5b8c\u6574\u4ee3\u7801",id:"\u5b8c\u6574\u4ee3\u7801",level:3}],y={toc:p};function g(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u9a8c\u8bc1\u7b7e\u540d"},"\u9a8c\u8bc1\u7b7e\u540d"),(0,i.kt)("p",null,"\u5728\u4e0a\u4e2a\u7ae0\u8282\u4e2d\uff0c\u6211\u4eec\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528\u79c1\u94a5\u5bf9\u4e00\u6bb5\u6570\u636e\u8fdb\u884c\u7b7e\u540d\u4ee5\u751f\u6210\u7b7e\u540d\u3002 \u73b0\u5728\u6211\u4eec\u5c06\u5b66\u4e60\u5982\u4f55\u9a8c\u8bc1\u7b7e\u540d\u7684\u771f\u5b9e\u6027\u3002"),(0,i.kt)("p",null,"\u6211\u4eec\u9700\u8981\u67093\u4ef6\u4e8b\u6765\u9a8c\u8bc1\u7b7e\u540d\uff1a\u7b7e\u540d\uff0c\u539f\u59cb\u6570\u636e\u7684\u54c8\u5e0c\u4ee5\u53ca\u7b7e\u540d\u8005\u7684\u516c\u94a5\u3002 \u5229\u7528\u8be5\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u5b9a\u516c\u94a5\u5bf9\u7684\u79c1\u94a5\u6301\u6709\u8005\u662f\u5426\u786e\u5b9e\u7b7e\u7f72\u4e86\u8be5\u6d88\u606f\u3002"),(0,i.kt)("p",null,"\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u4ee5\u5b57\u8282\u683c\u5f0f\u7684\u516c\u94a5\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"publicKeyBytes := crypto.FromECDSAPub(publicKeyECDSA)\n")),(0,i.kt)("p",null,"\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u9700\u8981\u539f\u59cb\u6570\u636e\u54c8\u5e0c\u3002 \u5728\u4e0a\u4e00\u8bfe\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528Keccak-256\u751f\u6210\u54c8\u5e0c\uff0c\u56e0\u6b64\u6211\u4eec\u5c06\u6267\u884c\u76f8\u540c\u7684\u64cd\u4f5c\u4ee5\u9a8c\u8bc1\u7b7e\u540d\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'data := []byte("hello")\nhash := crypto.Keccak256Hash(data)\nfmt.Println(hash.Hex()) // 0x1c8aff950685c2ed4bc3174f3472287b56d9517b9c948127319a09a7a36deac8\n')),(0,i.kt)("p",null,"\u73b0\u5728\u5047\u8bbe\u6211\u4eec\u6709\u5b57\u8282\u683c\u5f0f\u7684\u7b7e\u540d\uff0c\u6211\u4eec\u53ef\u4ee5\u4ecego-ethereum",(0,i.kt)("inlineCode",{parentName:"p"},"crypto"),"\u5305\u8c03\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"Ecrecover"),"\uff08\u692d\u5706\u66f2\u7ebf\u7b7e\u540d\u6062\u590d\uff09\u6765\u68c0\u7d22\u7b7e\u540d\u8005\u7684\u516c\u94a5\u3002 \u6b64\u51fd\u6570\u91c7\u7528\u5b57\u8282\u683c\u5f0f\u7684\u54c8\u5e0c\u548c\u7b7e\u540d\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"sigPublicKey, err := crypto.Ecrecover(hash.Bytes(), signature)\nif err != nil {\n  log.Fatal(err)\n}\n")),(0,i.kt)("p",null,"\u4e3a\u4e86\u9a8c\u8bc1\u6211\u4eec\u73b0\u5728\u5fc5\u987b\u5c06\u7b7e\u540d\u7684\u516c\u94a5\u4e0e\u671f\u671b\u7684\u516c\u94a5\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u5b83\u4eec\u5339\u914d\uff0c\u90a3\u4e48\u9884\u671f\u7684\u516c\u94a5\u6301\u6709\u8005\u786e\u5b9e\u662f\u539f\u59cb\u6d88\u606f\u7684\u7b7e\u540d\u8005\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"matches := bytes.Equal(sigPublicKey, publicKeyBytes)\nfmt.Println(matches) // true\n")),(0,i.kt)("p",null,"\u8fd8\u6709",(0,i.kt)("inlineCode",{parentName:"p"},"SigToPub"),"\u65b9\u6cd5\u505a\u540c\u6837\u7684\u4e8b\u60c5\uff0c\u533a\u522b\u662f\u5b83\u5c06\u8fd4\u56deECDSA\u7c7b\u578b\u4e2d\u7684\u7b7e\u540d\u516c\u94a5\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"sigPublicKeyECDSA, err := crypto.SigToPub(hash.Bytes(), signature)\nif err != nil {\n  log.Fatal(err)\n}\n\nsigPublicKeyBytes := crypto.FromECDSAPub(sigPublicKeyECDSA)\nmatches = bytes.Equal(sigPublicKeyBytes, publicKeyBytes)\nfmt.Println(matches) // true\n")),(0,i.kt)("p",null,"\u4e3a\u65b9\u4fbf\u8d77\u89c1\uff0c",(0,i.kt)("inlineCode",{parentName:"p"},"go-ethereum/crypto"),"\u5305\u63d0\u4f9b\u4e86",(0,i.kt)("inlineCode",{parentName:"p"},"VerifySignature"),"\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u6536\u539f\u59cb\u6570\u636e\u7684\u7b7e\u540d\uff0c\u54c8\u5e0c\u503c\u548c\u5b57\u8282\u683c\u5f0f\u7684\u516c\u94a5\u3002 \u5b83\u8fd4\u56de\u4e00\u4e2a\u5e03\u5c14\u503c\uff0c\u5982\u679c\u516c\u94a5\u4e0e\u7b7e\u540d\u7684\u7b7e\u540d\u8005\u5339\u914d\uff0c\u5219\u4e3atrue\u3002 \u4e00\u4e2a\u91cd\u8981\u7684\u95ee\u9898\u662f\u6211\u4eec\u5fc5\u987b\u9996\u5148\u5220\u9664signture\u7684\u6700\u540e\u4e00\u4e2a\u5b57\u8282\uff0c\u56e0\u4e3a\u5b83\u662fECDSA\u6062\u590dID\uff0c\u4e0d\u80fd\u5305\u542b\u5b83\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"signatureNoRecoverID := signature[:len(signature)-1] // remove recovery ID\nverified := crypto.VerifySignature(publicKeyBytes, hash.Bytes(), signatureNoRecoverID)\nfmt.Println(verified) // true\n")),(0,i.kt)("p",null,"\u8fd9\u4e9b\u5c31\u662f\u4f7f\u7528go-ethereum\u8f6f\u4ef6\u5305\u751f\u6210\u548c\u9a8c\u8bc1ECDSA\u7b7e\u540d\u7684\u57fa\u7840\u77e5\u8bc6\u3002"),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"\u5b8c\u6574\u4ee3\u7801"},"\u5b8c\u6574\u4ee3\u7801"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/signature_verify.go"},"signature_verify.go")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "bytes"\n    "crypto/ecdsa"\n    "fmt"\n    "log"\n\n    "github.com/ethereum/go-ethereum/common/hexutil"\n    "github.com/ethereum/go-ethereum/crypto"\n)\n\nfunc main() {\n    privateKey, err := crypto.HexToECDSA("fad9c8855b740a0b7ed4c221dbad0f33a83a49cad6b3fe8d5817ac83d38b6a19")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    publicKey := privateKey.Public()\n    publicKeyECDSA, ok := publicKey.(*ecdsa.PublicKey)\n    if !ok {\n        log.Fatal("cannot assert type: publicKey is not of type *ecdsa.PublicKey")\n    }\n\n    publicKeyBytes := crypto.FromECDSAPub(publicKeyECDSA)\n\n    data := []byte("hello")\n    hash := crypto.Keccak256Hash(data)\n    fmt.Println(hash.Hex()) // 0x1c8aff950685c2ed4bc3174f3472287b56d9517b9c948127319a09a7a36deac8\n\n    signature, err := crypto.Sign(hash.Bytes(), privateKey)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(hexutil.Encode(signature)) // 0x789a80053e4927d0a898db8e065e948f5cf086e32f9ccaa54c1908e22ac430c62621578113ddbb62d509bf6049b8fb544ab06d36f916685a2eb8e57ffadde02301\n\n    sigPublicKey, err := crypto.Ecrecover(hash.Bytes(), signature)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    matches := bytes.Equal(sigPublicKey, publicKeyBytes)\n    fmt.Println(matches) // true\n\n    sigPublicKeyECDSA, err := crypto.SigToPub(hash.Bytes(), signature)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    sigPublicKeyBytes := crypto.FromECDSAPub(sigPublicKeyECDSA)\n    matches = bytes.Equal(sigPublicKeyBytes, publicKeyBytes)\n    fmt.Println(matches) // true\n\n    signatureNoRecoverID := signature[:len(signature)-1] // remove recovery id\n    verified := crypto.VerifySignature(publicKeyBytes, hash.Bytes(), signatureNoRecoverID)\n    fmt.Println(verified) // true\n}\n')))}g.isMDXComponent=!0}}]);