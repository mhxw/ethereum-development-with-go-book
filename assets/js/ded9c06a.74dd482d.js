"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7580],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),d=o,f=p["".concat(l,".").concat(d)]||p[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1841:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return m}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],c={description:"Tutorial on how to load an initialize a smart contract with Go."},l="Loading a Smart Contract",s={unversionedId:"en/smart-contract-load/README",id:"en/smart-contract-load/README",title:"Loading a Smart Contract",description:"Tutorial on how to load an initialize a smart contract with Go.",source:"@site/docs/en/smart-contract-load/README.md",sourceDirName:"en/smart-contract-load",slug:"/en/smart-contract-load/",permalink:"/ethereum-development-with-go-book/docs/en/smart-contract-load/",editUrl:"https://github.com/mhxw/ethereum-development-with-go-book/tree/dev/docs/en/smart-contract-load/README.md",tags:[],version:"current",frontMatter:{description:"Tutorial on how to load an initialize a smart contract with Go."},sidebar:"en",previous:{title:"Deploying a Smart Contract",permalink:"/ethereum-development-with-go-book/docs/en/smart-contract-deploy/"},next:{title:"Querying a Smart Contract",permalink:"/ethereum-development-with-go-book/docs/en/smart-contract-read/"}},u={},m=[{value:"Full code",id:"full-code",level:3}],p={toc:m};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"loading-a-smart-contract"},"Loading a Smart Contract"),(0,a.kt)("p",null,"These section requires knowledge of how to compile a smart contract's ABI to a Go contract file. If you haven't already gone through it, please ",(0,a.kt)("a",{parentName:"p",href:"../smart-contract-compile"},"read the section")," first."),(0,a.kt)("p",null,"Once you've compiled your smart contract's ABI to a Go package using the ",(0,a.kt)("inlineCode",{parentName:"p"},"abigen"),' tool, the next step is to call the "New" method, which is in the format ',(0,a.kt)("inlineCode",{parentName:"p"},"New<ContractName>"),", so in our example if you recall it's going to be ",(0,a.kt)("em",{parentName:"p"},"NewStore"),". This initializer method takes in the address of the smart contract and returns a contract instance that you can start interact with it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'address := common.HexToAddress("0x147B8eb97fD247D06C4006D269c90C1908Fb5D54")\ninstance, err := store.NewStore(address, client)\nif err != nil {\n  log.Fatal(err)\n}\n\n_ = instance // we\'ll be using this in the next section\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"full-code"},"Full code"),(0,a.kt)("p",null,"Commands"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"solc --abi Store.sol\nsolc --bin Store.sol\nabigen --bin=Store_sol_Store.bin --abi=Store_sol_Store.abi --pkg=store --out=Store.go\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/contracts/Store.sol"},"Store.sol")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity ^0.4.24;\n\ncontract Store {\n  event ItemSet(bytes32 key, bytes32 value);\n\n  string public version;\n  mapping (bytes32 => bytes32) public items;\n\n  constructor(string _version) public {\n    version = _version;\n  }\n\n  function setItem(bytes32 key, bytes32 value) external {\n    items[key] = value;\n    emit ItemSet(key, value);\n  }\n}\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/contract_load.go"},"contract_load.go")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "log"\n\n    "github.com/ethereum/go-ethereum/common"\n    "github.com/ethereum/go-ethereum/ethclient"\n\n    store "./contracts" // for demo\n)\n\nfunc main() {\n    client, err := ethclient.Dial("https://rinkeby.infura.io")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    address := common.HexToAddress("0x147B8eb97fD247D06C4006D269c90C1908Fb5D54")\n    instance, err := store.NewStore(address, client)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println("contract is loaded")\n    _ = instance\n}\n')),(0,a.kt)("p",null,"solc version used for these examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ solc --version\n0.4.24+commit.e67f0147.Emscripten.clang\n")))}d.isMDXComponent=!0}}]);