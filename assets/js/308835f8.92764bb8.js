"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4402],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return y}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),y=o,f=d["".concat(l,".").concat(y)]||d[y]||u[y]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3842:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return y},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={description:"Tutorial on creating and importing a keystore with Go."},l="Keystores",c={unversionedId:"en/keystore/README",id:"en/keystore/README",title:"Keystores",description:"Tutorial on creating and importing a keystore with Go.",source:"@site/docs/en/keystore/README.md",sourceDirName:"en/keystore",slug:"/en/keystore/",permalink:"/ethereum-development-with-go-book/docs/en/keystore/",editUrl:"https://github.com/mhxw/ethereum-development-with-go-book/tree/dev/docs/en/keystore/README.md",tags:[],version:"current",frontMatter:{description:"Tutorial on creating and importing a keystore with Go."},sidebar:"en",previous:{title:"Generating New Wallets",permalink:"/ethereum-development-with-go-book/docs/en/wallet-generate/"},next:{title:"HD Wallet",permalink:"/ethereum-development-with-go-book/docs/en/hd-wallet/"}},p={},u=[{value:"Full code",id:"full-code",level:3}],d={toc:u};function y(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"keystores"},"Keystores"),(0,a.kt)("p",null,"A keystore is a file containing an encrypted wallet private key. Keystores in go-ethereum can only contain one wallet key pair per file. To generate keystores first you must invoke ",(0,a.kt)("inlineCode",{parentName:"p"},"NewKeyStore")," giving it the directory path to save the keystores. After that, you may generate a new wallet by calling the method ",(0,a.kt)("inlineCode",{parentName:"p"},"NewAccount")," passing it a password for encryption. Every time you call ",(0,a.kt)("inlineCode",{parentName:"p"},"NewAccount")," it will generate a new keystore file on disk."),(0,a.kt)("p",null,"Here's a full example of generating a new keystore account."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'ks := keystore.NewKeyStore("./wallets", keystore.StandardScryptN, keystore.StandardScryptP)\npassword := "secret"\naccount, err := ks.NewAccount(password)\nif err != nil {\n  log.Fatal(err)\n}\n\nfmt.Println(account.Address.Hex()) // 0x20F8D42FB0F667F2E53930fed426f225752453b3\n')),(0,a.kt)("p",null,"Now to import your keystore you basically need to invoke ",(0,a.kt)("inlineCode",{parentName:"p"},"NewKeyStore")," again as usual and then call the ",(0,a.kt)("inlineCode",{parentName:"p"},"Import")," method which accepts the keystore JSON data as bytes. The second argument is the password used to encrypt it in order to decrypt it. The third argument is to specify a new encryption password but we'll use the same one in the example. Importing the account will give you access to the account as expected but it'll generate a new keystore file! There's no point in having two of the same thing so we'll delete the old one."),(0,a.kt)("p",null,"Here's an example of importing a keystore and accessing the account."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'file := "./wallets/UTC--2018-07-04T09-58-30.122808598Z--20f8d42fb0f667f2e53930fed426f225752453b3"\nks := keystore.NewKeyStore("./tmp", keystore.StandardScryptN, keystore.StandardScryptP)\njsonBytes, err := ioutil.ReadFile(file)\nif err != nil {\n  log.Fatal(err)\n}\n\npassword := "secret"\naccount, err := ks.Import(jsonBytes, password, password)\nif err != nil {\n  log.Fatal(err)\n}\n\nfmt.Println(account.Address.Hex()) // 0x20F8D42FB0F667F2E53930fed426f225752453b3\n\nif err := os.Remove(file); err != nil {\n  log.Fatal(err)\n}\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"full-code"},"Full code"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/keystore.go"},"keystore.go")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "io/ioutil"\n    "log"\n    "os"\n\n    "github.com/ethereum/go-ethereum/accounts/keystore"\n)\n\nfunc createKs() {\n    ks := keystore.NewKeyStore("./tmp", keystore.StandardScryptN, keystore.StandardScryptP)\n    password := "secret"\n    account, err := ks.NewAccount(password)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(account.Address.Hex()) // 0x20F8D42FB0F667F2E53930fed426f225752453b3\n}\n\nfunc importKs() {\n    file := "./tmp/UTC--2018-07-04T09-58-30.122808598Z--20f8d42fb0f667f2e53930fed426f225752453b3"\n    ks := keystore.NewKeyStore("./tmp", keystore.StandardScryptN, keystore.StandardScryptP)\n    jsonBytes, err := ioutil.ReadFile(file)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    password := "secret"\n    account, err := ks.Import(jsonBytes, password, password)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Println(account.Address.Hex()) // 0x20F8D42FB0F667F2E53930fed426f225752453b3\n\n    if err := os.Remove(file); err != nil {\n        log.Fatal(err)\n    }\n}\n\nfunc main() {\n    createKs()\n    //importKs()\n}\n')))}y.isMDXComponent=!0}}]);