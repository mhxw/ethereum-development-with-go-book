"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2093],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return h}});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=l(t),h=s,g=m["".concat(c,".").concat(h)]||m[h]||p[h]||i;return t?r.createElement(g,a(a({ref:n},u),{},{components:t})):r.createElement(g,a({ref:n},u))}));function h(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var i=t.length,a=new Array(i);a[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,a[1]=o;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4889:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var r=t(7462),s=t(3366),i=(t(7294),t(3905)),a=["components"],o={description:"Tutorial on how to subscribe to messages on whisper with Go."},c="Subscribing to Whisper Messages",l={unversionedId:"en/whisper-subscribe/README",id:"en/whisper-subscribe/README",title:"Subscribing to Whisper Messages",description:"Tutorial on how to subscribe to messages on whisper with Go.",source:"@site/docs/en/whisper-subscribe/README.md",sourceDirName:"en/whisper-subscribe",slug:"/en/whisper-subscribe/",permalink:"/ethereum-development-with-go-book/docs/en/whisper-subscribe/",editUrl:"https://github.com/mhxw/ethereum-development-with-go-book/tree/dev/docs/en/whisper-subscribe/README.md",tags:[],version:"current",frontMatter:{description:"Tutorial on how to subscribe to messages on whisper with Go."},sidebar:"en",previous:{title:"Sending Messages on Whisper",permalink:"/ethereum-development-with-go-book/docs/en/whisper-send/"},next:{title:"Utilities",permalink:"/ethereum-development-with-go-book/docs/en/util/"}},u={},p=[{value:"Full code",id:"full-code",level:3}],m={toc:p};function h(e){var n=e.components,t=(0,s.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"subscribing-to-whisper-messages"},"Subscribing to Whisper Messages"),(0,i.kt)("p",null,"In this section we'll be subscribing to whisper messages over websockets. First thing we need is a channel that will be receiving whisper messages in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Message")," type from the ",(0,i.kt)("inlineCode",{parentName:"p"},"whisper/whisperv6")," package."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"messages := make(chan *whisperv6.Message)\n")),(0,i.kt)("p",null,"Before we invoke a subscription, we first need to determine the criteria. From the whisperv6 package initialize a new ",(0,i.kt)("inlineCode",{parentName:"p"},"Criteria")," object. Since we're only interested in messages targeted to us, we'll set the ",(0,i.kt)("inlineCode",{parentName:"p"},"PrivateKeyID")," property on the criteria object to the same key ID we used for encrypting messages."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"criteria := whisperv6.Criteria{\n  PrivateKeyID: keyID,\n}\n")),(0,i.kt)("p",null,"Next we invoke the client's ",(0,i.kt)("inlineCode",{parentName:"p"},"SubscribeMessages")," method which subscribes to messages that match the given criteria. This method is not supported over HTTP; only supported on bi-directional connections such as websockets and IPC. The last argument is the messages channel we created earlier."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"sub, err := client.SubscribeMessages(context.Background(), criteria, messages)\nif err != nil {\n  log.Fatal(err)\n}\n")),(0,i.kt)("p",null,"Now that we have our subscription, we can use a ",(0,i.kt)("inlineCode",{parentName:"p"},"select")," statement to read messages as they come in and also to handle errors from the subscription. If you recall from the previous section, the message content is in the ",(0,i.kt)("inlineCode",{parentName:"p"},"Payload")," property as a byte slice which we can convert back to a human readable string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'for {\n  select {\n  case err := <-sub.Err():\n    log.Fatal(err)\n  case message := <-messages:\n    fmt.Printf(string(message.Payload)) // "Hello"\n  }\n}\n')),(0,i.kt)("p",null,"Check out the full code below for a complete working example. That's all there is to whisper message subscriptions."),(0,i.kt)("hr",null),(0,i.kt)("h3",{id:"full-code"},"Full code"),(0,i.kt)("p",null,"Commands"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"geth --shh --rpc --ws\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/whisper_subscribe.go"},"whisper_subscribe.go")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "os"\n    "runtime"\n\n    "github.com/ethereum/go-ethereum/common/hexutil"\n    "github.com/ethereum/go-ethereum/whisper/shhclient"\n    "github.com/ethereum/go-ethereum/whisper/whisperv6"\n)\n\nfunc main() {\n    client, err := shhclient.Dial("ws://127.0.0.1:8546")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    keyID, err := client.NewKeyPair(context.Background())\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(keyID) // 0ec5cfe4e215239756054992dbc2e10f011db1cdfc88b9ba6301e2f9ea1b58d2\n\n    messages := make(chan *whisperv6.Message)\n    criteria := whisperv6.Criteria{\n        PrivateKeyID: keyID,\n    }\n    sub, err := client.SubscribeMessages(context.Background(), criteria, messages)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    go func() {\n        for {\n            select {\n            case err := <-sub.Err():\n                log.Fatal(err)\n            case message := <-messages:\n                fmt.Printf(string(message.Payload)) // "Hello"\n                os.Exit(0)\n            }\n        }\n    }()\n\n    publicKey, err := client.PublicKey(context.Background(), keyID)\n    if err != nil {\n        log.Print(err)\n    }\n    fmt.Println(hexutil.Encode(publicKey)) // 0x04f17356fd52b0d13e5ede84f998d26276f1fc9d08d9e73dcac6ded5f3553405db38c2f257c956f32a0c1fca4c3ff6a38a2c277c1751e59a574aecae26d3bf5d1d\n\n    message := whisperv6.NewMessage{\n        Payload:   []byte("Hello"),\n        PublicKey: publicKey,\n        TTL:       60,\n        PowTime:   2,\n        PowTarget: 2.5,\n    }\n\n    messageHash, err := client.Post(context.Background(), message)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(messageHash) // 0xdbfc815d3d122a90d7fb44d1fc6a46f3d76ec752f3f3d04230fe5f1b97d2209a\n\n    runtime.Goexit() // wait for goroutines to finish\n}\n')))}h.isMDXComponent=!0}}]);