"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5657],{3905:function(e,n,t){t.d(n,{Zo:function(){return f},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},f=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,f=i(e,["components","mdxType","originalType","parentName"]),p=s(t),d=a,u=p["".concat(c,".").concat(d)]||p[d]||m[d]||o;return t?r.createElement(u,l(l({ref:n},f),{},{components:t})):r.createElement(u,l({ref:n},f))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1428:function(e,n,t){t.r(n),t.d(n,{assets:function(){return f},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),l=["components"],i={description:"Tutorial on downloadig files from swarm in Go."},c="Downloading Files from Swarm",s={unversionedId:"en/swarm-download/README",id:"en/swarm-download/README",title:"Downloading Files from Swarm",description:"Tutorial on downloadig files from swarm in Go.",source:"@site/docs/en/swarm-download/README.md",sourceDirName:"en/swarm-download",slug:"/en/swarm-download/",permalink:"/ethereum-development-with-go-book/docs/en/swarm-download/",editUrl:"https://github.com/mhxw/ethereum-development-with-go-book/tree/dev/docs/en/swarm-download/README.md",tags:[],version:"current",frontMatter:{description:"Tutorial on downloadig files from swarm in Go."},sidebar:"en",previous:{title:"Uploading Files to Swarm",permalink:"/ethereum-development-with-go-book/docs/en/swarm-upload/"},next:{title:"Swarm",permalink:"/ethereum-development-with-go-book/docs/en/swarm/"}},f={},m=[{value:"Full code",id:"full-code",level:3}],p={toc:m};function d(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"downloading-files-from-swarm"},"Downloading Files from Swarm"),(0,o.kt)("p",null,"In the ",(0,o.kt)("a",{parentName:"p",href:"../swarm-upload"},"previous section")," we uploaded a hello.txt file to swarm and in return we got a manifest hash."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'manifestHash := "f9192507e2e8e118bfedac428c3aa1dec4ae156e954128ec5fb27f63ee67bcac"\n')),(0,o.kt)("p",null,"Let's inspect the manifest by downloading it first by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"DownloadManfest"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"manifest, isEncrypted, err := client.DownloadManifest(manifestHash)\nif err != nil {\n  log.Fatal(err)\n}\n")),(0,o.kt)("p",null,"We can iterate over the manifest entries and see what the content-type, size, and content hash are."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'for _, entry := range manifest.Entries {\n  fmt.Println(entry.Hash)        // 42179060941352ba7b400b16c40f1e1290423a826de2a70587034dc14bc4ab2f\n  fmt.Println(entry.ContentType) // text/plain; charset=utf-8\n  fmt.Println(entry.Path)        // ""\n}\n')),(0,o.kt)("p",null,"If you're familiar with swarm urls, they're in the format ",(0,o.kt)("inlineCode",{parentName:"p"},"bzz:/<hash>/<path>"),", so in order to download the file we specify the manifest hash and path. The path in this case is an empty string. We pass this data to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Download")," function and get back a file object."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'file, err := client.Download(manifestHash, "")\nif err != nil {\n  log.Fatal(err)\n}\n')),(0,o.kt)("p",null,"We may now read and print the contents of the returned file reader."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"content, err := ioutil.ReadAll(file)\nif err != nil {\n  log.Fatal(err)\n}\n\nfmt.Println(string(content)) // hello world\n")),(0,o.kt)("p",null,"As expected, it logs ",(0,o.kt)("em",{parentName:"p"},"hello world")," which what our original file contained."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"full-code"},"Full code"),(0,o.kt)("p",null,"Commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"geth account new\nexport BZZKEY=970ef9790b54425bea2c02e25cab01e48cf92573\nswarm --bzzaccount $BZZKEY\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/swarm_download.go"},"swarm_download.go")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "io/ioutil"\n    "log"\n\n    bzzclient "github.com/ethersphere/swarm/api/client"\n)\n\nfunc main() {\n    client := bzzclient.NewClient("http://127.0.0.1:8500")\n    manifestHash := "2e0849490b62e706a5f1cb8e7219db7b01677f2a859bac4b5f522afd2a5f02c0"\n    manifest, isEncrypted, err := client.DownloadManifest(manifestHash)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(isEncrypted) // false\n\n    for _, entry := range manifest.Entries {\n        fmt.Println(entry.Hash)        // 42179060941352ba7b400b16c40f1e1290423a826de2a70587034dc14bc4ab2f\n        fmt.Println(entry.ContentType) // text/plain; charset=utf-8\n        fmt.Println(entry.Size)        // 12\n        fmt.Println(entry.Path)        // ""\n    }\n\n    file, err := client.Download(manifestHash, "")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    content, err := ioutil.ReadAll(file)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(string(content)) // hello world\n}\n')))}d.isMDXComponent=!0}}]);