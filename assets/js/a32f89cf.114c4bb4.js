"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5403],{3905:function(e,n,r){r.d(n,{Zo:function(){return i},kt:function(){return g}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=t.createContext({}),p=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},i=function(e){var n=p(e.components);return t.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),m=p(r),g=o,f=m["".concat(c,".").concat(g)]||m[g]||d[g]||a;return r?t.createElement(f,s(s({ref:n},i),{},{components:r})):t.createElement(f,s({ref:n},i))}));function g(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var p=2;p<a;p++)s[p]=r[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4446:function(e,n,r){r.r(n),r.d(n,{assets:function(){return i},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var t=r(7462),o=r(3366),a=(r(7294),r(3905)),s=["components"],l={"\u6982\u8ff0":"\u7528Go\u6765\u8bfb\u53d6ERC20\u4ee3\u5e01\u667a\u80fd\u5408\u7ea6\u7684\u6559\u7a0b\u3002"},c="\u8bfb\u53d6ERC-20\u4ee3\u5e01\u7684\u4e8b\u4ef6\u65e5\u5fd7",p={unversionedId:"zh/event-read-erc20/README",id:"zh/event-read-erc20/README",title:"\u8bfb\u53d6ERC-20\u4ee3\u5e01\u7684\u4e8b\u4ef6\u65e5\u5fd7",description:"\u9996\u5148\uff0c\u521b\u5efaERC-20\u667a\u80fd\u5408\u7ea6\u7684\u4e8b\u4ef6\u65e5\u5fd7\u7684interface\u6587\u4ef6 erc20.sol:",source:"@site/docs/zh/event-read-erc20/README.md",sourceDirName:"zh/event-read-erc20",slug:"/zh/event-read-erc20/",permalink:"/ethereum-development-with-go-book/docs/zh/event-read-erc20/",editUrl:"https://github.com/mhxw/ethereum-development-with-go-book/tree/dev/docs/zh/event-read-erc20/README.md",tags:[],version:"current",frontMatter:{"\u6982\u8ff0":"\u7528Go\u6765\u8bfb\u53d6ERC20\u4ee3\u5e01\u667a\u80fd\u5408\u7ea6\u7684\u6559\u7a0b\u3002"},sidebar:"zh",previous:{title:"\u8bfb\u53d6\u4e8b\u4ef6\u65e5\u5fd7",permalink:"/ethereum-development-with-go-book/docs/zh/event-read/"},next:{title:"\u8bfb\u53d60x Protocol\u4e8b\u4ef6\u65e5\u5fd7",permalink:"/ethereum-development-with-go-book/docs/zh/event-read-0xprotocol/"}},i={},d=[{value:"\u5b8c\u6574\u4ee3\u7801",id:"\u5b8c\u6574\u4ee3\u7801",level:3}],m={toc:d};function g(e){var n=e.components,r=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"\u8bfb\u53d6erc-20\u4ee3\u5e01\u7684\u4e8b\u4ef6\u65e5\u5fd7"},"\u8bfb\u53d6ERC-20\u4ee3\u5e01\u7684\u4e8b\u4ef6\u65e5\u5fd7"),(0,a.kt)("p",null,"\u9996\u5148\uff0c\u521b\u5efaERC-20\u667a\u80fd\u5408\u7ea6\u7684\u4e8b\u4ef6\u65e5\u5fd7\u7684interface\u6587\u4ef6 ",(0,a.kt)("inlineCode",{parentName:"p"},"erc20.sol"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity ^0.4.24;\n\ncontract ERC20 {\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n")),(0,a.kt)("p",null,"\u7136\u540e\u5728\u7ed9\u5b9aabi\u4f7f\u7528",(0,a.kt)("inlineCode",{parentName:"p"},"abigen"),"\u521b\u5efaGo\u5305"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"solc --abi erc20.sol\nabigen --abi=erc20_sol_ERC20.abi --pkg=token --out=erc20.go\n")),(0,a.kt)("p",null,"\u73b0\u5728\u5728\u6211\u4eec\u7684Go\u5e94\u7528\u7a0b\u5e8f\u4e2d\uff0c\u8ba9\u6211\u4eec\u521b\u5efa\u4e0eERC-20\u4e8b\u4ef6\u65e5\u5fd7\u7b7e\u540d\u7c7b\u578b\u76f8\u5339\u914d\u7684\u7ed3\u6784\u7c7b\u578b\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"type LogTransfer struct {\n    From   common.Address\n    To     common.Address\n    Tokens *big.Int\n}\n\ntype LogApproval struct {\n    TokenOwner common.Address\n    Spender    common.Address\n    Tokens     *big.Int\n}\n")),(0,a.kt)("p",null,"\u521d\u59cb\u5316\u4ee5\u592a\u574a\u5ba2\u6237\u7aef"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'client, err := ethclient.Dial("https://cloudflare-eth.com")\nif err != nil {\n  log.Fatal(err)\n}\n')),(0,a.kt)("p",null,"\u6309\u7167ERC-20\u667a\u80fd\u5408\u7ea6\u5730\u5740\u548c\u6240\u9700\u7684\u5757\u8303\u56f4\u521b\u5efa\u4e00\u4e2a\u201cFilterQuery\u201d\u3002\u8fd9\u4e2a\u4f8b\u5b50\u6211\u4eec\u4f1a\u7528",(0,a.kt)("a",{parentName:"p",href:"https://etherscan.io/token/0xe41d2489571d322189246dafa5ebde1f4699f498"},"ZRX")," \u4ee3\u5e01:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// 0x Protocol (ZRX) token address\ncontractAddress := common.HexToAddress("0xe41d2489571d322189246dafa5ebde1f4699f498")\nquery := ethereum.FilterQuery{\n  FromBlock: big.NewInt(6383820),\n  ToBlock:   big.NewInt(6383840),\n  Addresses: []common.Address{\n    contractAddress,\n  },\n}\n')),(0,a.kt)("p",null,"\u7528",(0,a.kt)("inlineCode",{parentName:"p"},"FilterLogs"),"\u6765\u8fc7\u6ee4\u65e5\u5fd7\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"logs, err := client.FilterLogs(context.Background(), query)\nif err != nil {\n  log.Fatal(err)\n}\n")),(0,a.kt)("p",null,"\u63a5\u4e0b\u6765\u6211\u4eec\u5c06\u89e3\u6790JSON abi\uff0c\u7a0d\u540e\u6211\u4eec\u5c06\u4f7f\u7528\u89e3\u538b\u7f29\u539f\u59cb\u65e5\u5fd7\u6570\u636e\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},"contractAbi, err := abi.JSON(strings.NewReader(string(token.TokenABI)))\nif err != nil {\n  log.Fatal(err)\n}\n")),(0,a.kt)("p",null,"\u4e3a\u4e86\u6309\u67d0\u79cd\u65e5\u5fd7\u7c7b\u578b\u8fdb\u884c\u8fc7\u6ee4\uff0c\u6211\u4eec\u9700\u8981\u5f04\u6e05\u695a\u6bcf\u4e2a\u4e8b\u4ef6\u65e5\u5fd7\u51fd\u6570\u7b7e\u540d\u7684keccak256\u54c8\u5e0c\u503c\u3002 \u4e8b\u4ef6\u65e5\u5fd7\u51fd\u6570\u7b7e\u540d\u54c8\u5e0c\u59cb\u7ec8\u662f",(0,a.kt)("inlineCode",{parentName:"p"},"topic [0]"),"\uff0c\u6211\u4eec\u5f88\u5feb\u5c31\u4f1a\u770b\u5230\u3002 \u4ee5\u4e0b\u662f\u4f7f\u7528go-ethereum",(0,a.kt)("inlineCode",{parentName:"p"},"crypto"),"\u5305\u8ba1\u7b97keccak256\u54c8\u5e0c\u7684\u65b9\u6cd5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'logTransferSig := []byte("Transfer(address,address,uint256)")\nLogApprovalSig := []byte("Approval(address,address,uint256)")\nlogTransferSigHash := crypto.Keccak256Hash(logTransferSig)\nlogApprovalSigHash := crypto.Keccak256Hash(LogApprovalSig)\n')),(0,a.kt)("p",null,"\u73b0\u5728\u6211\u4eec\u5c06\u904d\u5386\u6240\u6709\u65e5\u5fd7\u5e76\u8bbe\u7f6eswitch\u8bed\u53e5\u4ee5\u6309\u4e8b\u4ef6\u65e5\u5fd7\u7c7b\u578b\u8fdb\u884c\u8fc7\u6ee4\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'for _, vLog := range logs {\n  fmt.Printf("Log Block Number: %d\\n", vLog.BlockNumber)\n  fmt.Printf("Log Index: %d\\n", vLog.Index)\n\n  switch vLog.Topics[0].Hex() {\n  case logTransferSigHash.Hex():\n    //\n  case logApprovalSigHash.Hex():\n    //\n  }\n}\n')),(0,a.kt)("p",null,"\u73b0\u5728\u8981\u89e3\u6790",(0,a.kt)("inlineCode",{parentName:"p"},"Transfer"),"\u4e8b\u4ef6\u65e5\u5fd7\uff0c\u6211\u4eec\u5c06\u4f7f\u7528",(0,a.kt)("inlineCode",{parentName:"p"},"abi.Unpack"),"\u5c06\u539f\u59cb\u65e5\u5fd7\u6570\u636e\u89e3\u6790\u4e3a\u6211\u4eec\u7684\u65e5\u5fd7\u7c7b\u578b\u7ed3\u6784\u3002 \u89e3\u5305\u4e0d\u4f1a\u89e3\u6790",(0,a.kt)("inlineCode",{parentName:"p"},"indexed"),"\u4e8b\u4ef6\u7c7b\u578b\uff0c\u56e0\u4e3a\u5b83\u4eec\u5b58\u50a8\u5728",(0,a.kt)("inlineCode",{parentName:"p"},"topics"),"\u4e0b\uff0c\u6240\u4ee5\u5bf9\u4e8e\u90a3\u4e9b\u6211\u4eec\u5fc5\u987b\u5355\u72ec\u89e3\u6790\uff0c\u5982\u4e0b\u4f8b\u6240\u793a\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'fmt.Printf("Log Name: Transfer\\n")\n\nvar transferEvent LogTransfer\n\nerr := contractAbi.Unpack(&transferEvent, "Transfer", vLog.Data)\nif err != nil {\n  log.Fatal(err)\n}\n\ntransferEvent.From = common.HexToAddress(vLog.Topics[1].Hex())\ntransferEvent.To = common.HexToAddress(vLog.Topics[2].Hex())\n\nfmt.Printf("From: %s\\n", transferEvent.From.Hex())\nfmt.Printf("To: %s\\n", transferEvent.To.Hex())\nfmt.Printf("Tokens: %s\\n", transferEvent.Tokens.String())\n')),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Approval")," \u65e5\u5fd7\u4e5f\u662f\u7c7b\u4f3c\u7684\u65b9\u6cd5\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'fmt.Printf("Log Name: Approval\\n")\n\nvar approvalEvent LogApproval\n\nerr := contractAbi.Unpack(&approvalEvent, "Approval", vLog.Data)\nif err != nil {\n  log.Fatal(err)\n}\n\napprovalEvent.TokenOwner = common.HexToAddress(vLog.Topics[1].Hex())\napprovalEvent.Spender = common.HexToAddress(vLog.Topics[2].Hex())\n\nfmt.Printf("Token Owner: %s\\n", approvalEvent.TokenOwner.Hex())\nfmt.Printf("Spender: %s\\n", approvalEvent.Spender.Hex())\nfmt.Printf("Tokens: %s\\n", approvalEvent.Tokens.String())\n')),(0,a.kt)("p",null,"\u6700\u540e\uff0c\u628a\u6240\u6709\u7684\u6b65\u9aa4\u653e\u4e00\u8d77\uff1a"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Log Block Number: 6383829\nLog Index: 20\nLog Name: Transfer\nFrom: 0xd03dB9CF89A9b1f856a8E1650cFD78FAF2338eB2\nTo: 0x924CD9b60F4173DCDd5254ddD38C4F9CAB68FE6b\nTokens: 2804000000000000000000\n\n\nLog Block Number: 6383831\nLog Index: 62\nLog Name: Approval\nToken Owner: 0xDD3b9186Da521AbE707B48B8f805Fb3Cd5EEe0EE\nSpender: 0xCf67d7A481CEEca0a77f658991A00366FED558F7\nTokens: 10000000000000000000000000000000000000000000000000000000000000000\n\n\nLog Block Number: 6383838\nLog Index: 13\nLog Name: Transfer\nFrom: 0xBA826fEc90CEFdf6706858E5FbaFcb27A290Fbe0\nTo: 0x4aEE792A88eDDA29932254099b9d1e06D537883f\nTokens: 2863452144424379687066\n")),(0,a.kt)("p",null,"\u6211\u4eec\u53ef\u4ee5\u628a\u89e3\u6790\u7684\u65e5\u5fd7\u4e0eetherscan\u7684\u6570\u636e\u5bf9\u6bd4: ",(0,a.kt)("a",{parentName:"p",href:"https://etherscan.io/tx/0x0c3b6cf604275c7e44dc7db400428c1a39f33f0c6cbc19ff625f6057a5cb32c0#eventlog"},"https://etherscan.io/tx/0x0c3b6cf604275c7e44dc7db400428c1a39f33f0c6cbc19ff625f6057a5cb32c0#eventlog")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"\u5b8c\u6574\u4ee3\u7801"},"\u5b8c\u6574\u4ee3\u7801"),(0,a.kt)("p",null,"Commands"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"solc --abi erc20.sol\nabigen --abi=erc20_sol_ERC20.abi --pkg=token --out=erc20.go\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/contracts_erc20/erc20.sol"},"erc20.sol")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity ^0.4.24;\n\ncontract ERC20 {\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/event_read_erc20.go"},"event_read_erc20.go")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "math/big"\n    "strings"\n\n    token "./contracts_erc20" // for demo\n    "github.com/ethereum/go-ethereum"\n    "github.com/ethereum/go-ethereum/accounts/abi"\n    "github.com/ethereum/go-ethereum/common"\n    "github.com/ethereum/go-ethereum/crypto"\n    "github.com/ethereum/go-ethereum/ethclient"\n)\n\n// LogTransfer ..\ntype LogTransfer struct {\n    From   common.Address\n    To     common.Address\n    Tokens *big.Int\n}\n\n// LogApproval ..\ntype LogApproval struct {\n    TokenOwner common.Address\n    Spender    common.Address\n    Tokens     *big.Int\n}\n\nfunc main() {\n    client, err := ethclient.Dial("https://cloudflare-eth.com")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // 0x Protocol (ZRX) token address\n    contractAddress := common.HexToAddress("0xe41d2489571d322189246dafa5ebde1f4699f498")\n    query := ethereum.FilterQuery{\n        FromBlock: big.NewInt(6383820),\n        ToBlock:   big.NewInt(6383840),\n        Addresses: []common.Address{\n            contractAddress,\n        },\n    }\n\n    logs, err := client.FilterLogs(context.Background(), query)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    contractAbi, err := abi.JSON(strings.NewReader(string(token.TokenABI)))\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    logTransferSig := []byte("Transfer(address,address,uint256)")\n    LogApprovalSig := []byte("Approval(address,address,uint256)")\n    logTransferSigHash := crypto.Keccak256Hash(logTransferSig)\n    logApprovalSigHash := crypto.Keccak256Hash(LogApprovalSig)\n\n    for _, vLog := range logs {\n        fmt.Printf("Log Block Number: %d\\n", vLog.BlockNumber)\n        fmt.Printf("Log Index: %d\\n", vLog.Index)\n\n        switch vLog.Topics[0].Hex() {\n        case logTransferSigHash.Hex():\n            fmt.Printf("Log Name: Transfer\\n")\n\n            var transferEvent LogTransfer\n\n            err := contractAbi.Unpack(&transferEvent, "Transfer", vLog.Data)\n            if err != nil {\n                log.Fatal(err)\n            }\n\n            transferEvent.From = common.HexToAddress(vLog.Topics[1].Hex())\n            transferEvent.To = common.HexToAddress(vLog.Topics[2].Hex())\n\n            fmt.Printf("From: %s\\n", transferEvent.From.Hex())\n            fmt.Printf("To: %s\\n", transferEvent.To.Hex())\n            fmt.Printf("Tokens: %s\\n", transferEvent.Tokens.String())\n\n        case logApprovalSigHash.Hex():\n            fmt.Printf("Log Name: Approval\\n")\n\n            var approvalEvent LogApproval\n\n            err := contractAbi.Unpack(&approvalEvent, "Approval", vLog.Data)\n            if err != nil {\n                log.Fatal(err)\n            }\n\n            approvalEvent.TokenOwner = common.HexToAddress(vLog.Topics[1].Hex())\n            approvalEvent.Spender = common.HexToAddress(vLog.Topics[2].Hex())\n\n            fmt.Printf("Token Owner: %s\\n", approvalEvent.TokenOwner.Hex())\n            fmt.Printf("Spender: %s\\n", approvalEvent.Spender.Hex())\n            fmt.Printf("Tokens: %s\\n", approvalEvent.Tokens.String())\n        }\n\n        fmt.Printf("\\n\\n")\n    }\n}\n')),(0,a.kt)("p",null,"solc version used for these examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ solc --version\n0.4.24+commit.e67f0147.Emscripten.clang\n")))}g.isMDXComponent=!0}}]);