"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4058],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),s=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,h=m["".concat(c,".").concat(d)]||m[d]||p[d]||a;return n?o.createElement(h,l(l({ref:t},u),{},{components:n})):o.createElement(h,l({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9865:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return p}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),l=["components"],i={description:"Tutorial on how to compile a smart contract and read the ABI with Go."},c="Smart Contract Compilation & ABI",s={unversionedId:"en/smart-contract-compile/README",id:"en/smart-contract-compile/README",title:"Smart Contract Compilation & ABI",description:"Tutorial on how to compile a smart contract and read the ABI with Go.",source:"@site/docs/en/smart-contract-compile/README.md",sourceDirName:"en/smart-contract-compile",slug:"/en/smart-contract-compile/",permalink:"/ethereum-development-with-go-book/docs/en/smart-contract-compile/",editUrl:"https://github.com/mhxw/ethereum-development-with-go-book/tree/dev/docs/en/smart-contract-compile/README.md",tags:[],version:"current",frontMatter:{description:"Tutorial on how to compile a smart contract and read the ABI with Go."},sidebar:"en",previous:{title:"Smart Contracts",permalink:"/ethereum-development-with-go-book/docs/en/smart-contracts/"},next:{title:"Deploying a Smart Contract",permalink:"/ethereum-development-with-go-book/docs/en/smart-contract-deploy/"}},u={},p=[{value:"Install the Solidity Compiler",id:"install-the-solidity-compiler",level:3},{value:"Install <code>abigen</code> tool",id:"install-abigen-tool",level:3},{value:"Create smart contract",id:"create-smart-contract",level:3},{value:"Create Go contract file",id:"create-go-contract-file",level:3},{value:"Full code",id:"full-code",level:3}],m={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"smart-contract-compilation--abi"},"Smart Contract Compilation & ABI"),(0,a.kt)("p",null,"In order to interact with a smart contract in a Go application, we must first generate the ABI (application binary interface) of the contract and compile the ABI to a format that we can import into our Go application."),(0,a.kt)("h3",{id:"install-the-solidity-compiler"},"Install the Solidity Compiler"),(0,a.kt)("p",null,"The first step is to install the ",(0,a.kt)("a",{parentName:"p",href:"https://solidity.readthedocs.io/en/latest/installing-solidity.html"},"Solidity compiler")," (",(0,a.kt)("inlineCode",{parentName:"p"},"solc"),"). In this guide, we're using Solidity ",(0,a.kt)("inlineCode",{parentName:"p"},"0.4.24"),"."),(0,a.kt)("p",null,"Solc is available as a snapcraft package for Ubuntu."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"sudo snap install solc --edge\n")),(0,a.kt)("p",null,"Solc is available as a Homebrew package for macOS."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"brew update\nbrew tap ethereum/ethereum\nbrew install solidity\n")),(0,a.kt)("p",null,"Alternatively, you can run ",(0,a.kt)("inlineCode",{parentName:"p"},"solc")," with Docker using the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"## Download Docker image\ndocker pull ethereum/solc:0.4.24\n\n## Usage: docker run --rm -v $(pwd):/root ethereum/solc:0.4.24 <command_here>\n# To generate ABI file from .sol file and send output to ./build folder\ndocker run --rm -v $(pwd):/root ethereum/solc:0.4.24 --abi /root/Store.sol -o /root/build\n")),(0,a.kt)("p",null,"For other platforms or for installing from source, check out the official solidity ",(0,a.kt)("a",{parentName:"p",href:"https://solidity.readthedocs.io/en/latest/installing-solidity.html#building-from-source"},"install guide"),"."),(0,a.kt)("h3",{id:"install-abigen-tool"},"Install ",(0,a.kt)("inlineCode",{parentName:"h3"},"abigen")," tool"),(0,a.kt)("p",null,"We also need to install a tool called ",(0,a.kt)("inlineCode",{parentName:"p"},"abigen")," for generating the ABI from a solidity smart contract."),(0,a.kt)("p",null,"Assuming you have Go all set up on your computer, simply run the following to install the ",(0,a.kt)("inlineCode",{parentName:"p"},"abigen")," tool."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"go get -u github.com/ethereum/go-ethereum\ncd $GOPATH/src/github.com/ethereum/go-ethereum/\nmake\nmake devtools\n")),(0,a.kt)("h3",{id:"create-smart-contract"},"Create smart contract"),(0,a.kt)("p",null,"We'll create a simple smart contract to test with. More complex smart contracts, and smart contract development in general is out of scope for this book. I highly recommend checking out ",(0,a.kt)("a",{parentName:"p",href:"http://truffleframework.com/"},"truffle framework")," for developing and testing smart contracts."),(0,a.kt)("p",null,"This simple contract will be a key/value store with only 1 external method to set a key/value pair by anyone. We also added an event to emit after the value is set."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity ^0.4.24;\n\ncontract Store {\n  event ItemSet(bytes32 key, bytes32 value);\n\n  string public version;\n  mapping (bytes32 => bytes32) public items;\n\n  constructor(string _version) public {\n    version = _version;\n  }\n\n  function setItem(bytes32 key, bytes32 value) external {\n    items[key] = value;\n    emit ItemSet(key, value);\n  }\n}\n")),(0,a.kt)("p",null,"Although this smart contract is simple, it will work for this example."),(0,a.kt)("h3",{id:"create-go-contract-file"},"Create Go contract file"),(0,a.kt)("p",null,"Now we can generate the ABI from a solidity source file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"solc --abi Store.sol -o build\n")),(0,a.kt)("p",null,"It'll write it to a file called ",(0,a.kt)("inlineCode",{parentName:"p"},"./build/Store.abi")),(0,a.kt)("p",null,"Now let's convert the ABI to a Go file that we can import. This new file will contain all the available methods the we can use to interact with the smart contract from our Go application."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"abigen --abi=./build/Store.abi --pkg=store --out=Store.go\n")),(0,a.kt)("p",null,"In order to deploy a smart contract from Go, we also need to compile the solidity smart contract to EVM bytecode. The EVM bytecode is what will be sent in the data field of the transaction. The bin file is required for generating the deploy methods on the Go contract file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"solc --bin Store.sol -o build\n")),(0,a.kt)("p",null,"Now we compile the Go contract file which will include the deploy methods because we includes the bin file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"abigen --bin=./build/Store.bin --abi=./build/Store.abi --pkg=store --out=Store.go\n")),(0,a.kt)("p",null,"That's it for this lesson. In the next lessons we'll learn how to deploy the smart contract, and then interact with it."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"full-code"},"Full code"),(0,a.kt)("p",null,"Commands"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"go get -u github.com/ethereum/go-ethereum\ncd $GOPATH/src/github.com/ethereum/go-ethereum/\nmake\nmake devtools\n\nsolc --abi --bin Store.sol -o build\nabigen --bin=./build/Store.bin --abi=./build/Store.abi --pkg=store --out=Store.go\n")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/contracts/Store.sol"},"Store.sol")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"pragma solidity ^0.4.24;\n\ncontract Store {\n    event ItemSet(bytes32 key, bytes32 value);\n\n    string public version;\n    mapping (bytes32 => bytes32) public items;\n\n    constructor(string _version) public {\n        version = _version;\n    }\n\n    function setItem(bytes32 key, bytes32 value) external {\n        items[key] = value;\n        emit ItemSet(key, value);\n    }\n}\n")))}d.isMDXComponent=!0}}]);