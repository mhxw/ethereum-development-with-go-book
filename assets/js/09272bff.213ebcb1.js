"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3260],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(f,l(l({ref:t},s),{},{components:n})):r.createElement(f,l({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6243:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),l=["components"],i={description:"Tutorial on uploading files to swarm with go."},p="Uploading Files to Swarm",c={unversionedId:"en/swarm-upload/README",id:"en/swarm-upload/README",title:"Uploading Files to Swarm",description:"Tutorial on uploading files to swarm with go.",source:"@site/docs/en/swarm-upload/README.md",sourceDirName:"en/swarm-upload",slug:"/en/swarm-upload/",permalink:"/ethereum-development-with-go-book/docs/en/swarm-upload/",editUrl:"https://github.com/mhxw/ethereum-development-with-go-book/tree/dev/docs/en/swarm-upload/README.md",tags:[],version:"current",frontMatter:{description:"Tutorial on uploading files to swarm with go."},sidebar:"en",previous:{title:"Setting up Swarm",permalink:"/ethereum-development-with-go-book/docs/en/swarm-setup/"},next:{title:"Downloading Files from Swarm",permalink:"/ethereum-development-with-go-book/docs/en/swarm-download/"}},s={},u=[{value:"Full code",id:"full-code",level:3}],m={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"uploading-files-to-swarm"},"Uploading Files to Swarm"),(0,o.kt)("p",null,"In the ",(0,o.kt)("a",{parentName:"p",href:"../swarm-setup"},"previous section")," we setup a swarm node running as a daemon on port ",(0,o.kt)("inlineCode",{parentName:"p"},"8500"),". Now import the swarm package ethersphere ",(0,o.kt)("inlineCode",{parentName:"p"},"swarm/api/client"),". I'll be aliasing the package to ",(0,o.kt)("inlineCode",{parentName:"p"},"bzzclient"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'import (\n  bzzclient "github.com/ethersphere/swarm/api/client"\n)\n')),(0,o.kt)("p",null,"Invoke ",(0,o.kt)("inlineCode",{parentName:"p"},"NewClient")," function passing it the swarm daemon url."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'client := bzzclient.NewClient("http://127.0.0.1:8500")\n')),(0,o.kt)("p",null,"Create an example text file ",(0,o.kt)("inlineCode",{parentName:"p"},"hello.txt")," with the content ",(0,o.kt)("em",{parentName:"p"},"hello world"),". We'll be uploading this to swarm."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"hello world\n")),(0,o.kt)("p",null,"In our Go application we'll open the file we just created using ",(0,o.kt)("inlineCode",{parentName:"p"},"Open")," from the client package. This function will return a ",(0,o.kt)("inlineCode",{parentName:"p"},"File")," type which represents a file in a swarm manifest and is used for uploading and downloading content to and from swarm."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'file, err := bzzclient.Open("hello.txt")\nif err != nil {\n  log.Fatal(err)\n}\n')),(0,o.kt)("p",null,"Now we can invoke the ",(0,o.kt)("inlineCode",{parentName:"p"},"Upload")," function from our client instance giving it the file object. The second argument is an optional existing manifest string to add the file to, otherwise it'll create on for us. The third argument is if we want our data to be encrypted."),(0,o.kt)("p",null,"The hash returned is the swarm hash of a manifest that contains the hello.txt file as its only entry. So by default both the primary content and the manifest is uploaded. The manifest makes sure you could retrieve the file with the correct mime type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'manifestHash, err := client.Upload(file, "", false)\nif err != nil {\n  log.Fatal(err)\n}\n\nfmt.Println(manifestHash) // 2e0849490b62e706a5f1cb8e7219db7b01677f2a859bac4b5f522afd2a5f02c0\n')),(0,o.kt)("p",null,"Now we can access our file at ",(0,o.kt)("inlineCode",{parentName:"p"},"bzz://2e0849490b62e706a5f1cb8e7219db7b01677f2a859bac4b5f522afd2a5f02c0")," which learn how to do in the ",(0,o.kt)("a",{parentName:"p",href:"../swarm-download"},"next section"),"."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"full-code"},"Full code"),(0,o.kt)("p",null,"Commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"geth account new\nexport BZZKEY=970ef9790b54425bea2c02e25cab01e48cf92573\nswarm --bzzaccount $BZZKEY\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/hello.txt"},"hello.txt")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-txt"},"hello world\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/swarm_upload.go"},"swarm_upload.go")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "log"\n\n    bzzclient "github.com/ethersphere/swarm/api/client"\n)\n\nfunc main() {\n    client := bzzclient.NewClient("http://127.0.0.1:8500")\n\n    file, err := bzzclient.Open("hello.txt")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    manifestHash, err := client.Upload(file, "", false, false, false)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(manifestHash) // 2e0849490b62e706a5f1cb8e7219db7b01677f2a859bac4b5f522afd2a5f02c0\n}\n')))}d.isMDXComponent=!0}}]);