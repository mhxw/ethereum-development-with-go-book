"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6425],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(t),p=a,g=d["".concat(l,".").concat(p)]||d[p]||m[p]||i;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function p(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8643:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return m}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],c={"\u6982\u8ff0":"\u7528Go\u642d\u5efa\u6a21\u62df\u5ba2\u6237\u7aef\u4f5c\u4e3a\u6d4b\u8bd5\u4ee5\u592a\u574a\u5e94\u7528\u7a0b\u5e8f\u7684\u5ba2\u6237\u7aef\u7684\u6559\u7a0b\u3002"},l="\u4f7f\u7528\u6a21\u62df\u5ba2\u6237\u7aef",s={unversionedId:"zh/client-simulated/README",id:"zh/client-simulated/README",title:"\u4f7f\u7528\u6a21\u62df\u5ba2\u6237\u7aef",description:"\u60a8\u53ef\u4ee5\u4f7f\u7528\u6a21\u62df\u5ba2\u6237\u7aef\u6765\u5feb\u901f\u8f7b\u677e\u5730\u5728\u672c\u5730\u6d4b\u8bd5\u60a8\u7684\u4ea4\u6613\uff0c\u975e\u5e38\u9002\u5408\u5355\u5143\u6d4b\u8bd5\u3002\u4e3a\u4e86\u5f00\u59cb\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5e26\u6709\u521d\u59cbETH\u7684\u8d26\u6237\u3002\u4e3a\u6b64\uff0c\u9996\u5148\u751f\u6210\u4e00\u4e2a\u8d26\u6237\u79c1\u94a5\u3002",source:"@site/docs/zh/client-simulated/README.md",sourceDirName:"zh/client-simulated",slug:"/zh/client-simulated/",permalink:"/ethereum-development-with-go-book/docs/zh/client-simulated/",editUrl:"https://github.com/mhxw/ethereum-development-with-go-book/tree/dev/docs/zh/client-simulated/README.md",tags:[],version:"current",frontMatter:{"\u6982\u8ff0":"\u7528Go\u642d\u5efa\u6a21\u62df\u5ba2\u6237\u7aef\u4f5c\u4e3a\u6d4b\u8bd5\u4ee5\u592a\u574a\u5e94\u7528\u7a0b\u5e8f\u7684\u5ba2\u6237\u7aef\u7684\u6559\u7a0b\u3002"},sidebar:"zh",previous:{title:"\u6c34\u9f99\u5934",permalink:"/ethereum-development-with-go-book/docs/zh/faucets/"},next:{title:"Swarm",permalink:"/ethereum-development-with-go-book/docs/zh/swarm/"}},u={},m=[{value:"\u5b8c\u6574\u4ee3\u7801",id:"\u5b8c\u6574\u4ee3\u7801",level:3}],d={toc:m};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u4f7f\u7528\u6a21\u62df\u5ba2\u6237\u7aef"},"\u4f7f\u7528\u6a21\u62df\u5ba2\u6237\u7aef"),(0,i.kt)("p",null,"\u60a8\u53ef\u4ee5\u4f7f\u7528\u6a21\u62df\u5ba2\u6237\u7aef\u6765\u5feb\u901f\u8f7b\u677e\u5730\u5728\u672c\u5730\u6d4b\u8bd5\u60a8\u7684\u4ea4\u6613\uff0c\u975e\u5e38\u9002\u5408\u5355\u5143\u6d4b\u8bd5\u3002\u4e3a\u4e86\u5f00\u59cb\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5e26\u6709\u521d\u59cbETH\u7684\u8d26\u6237\u3002\u4e3a\u6b64\uff0c\u9996\u5148\u751f\u6210\u4e00\u4e2a\u8d26\u6237\u79c1\u94a5\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"privateKey, err := crypto.GenerateKey()\nif err != nil {\n  log.Fatal(err)\n}\n")),(0,i.kt)("p",null,"\u63a5\u7740\u4ece",(0,i.kt)("inlineCode",{parentName:"p"},"accounts/abi/bind"),"\u5305\u521b\u5efa\u4e00\u4e2a",(0,i.kt)("inlineCode",{parentName:"p"},"NewKeyedTransactor"),"\uff0c\u5e76\u4e3a\u5176\u4f20\u9012\u79c1\u94a5\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"auth := bind.NewKeyedTransactor(privateKey)\n")),(0,i.kt)("p",null,"\u4e0b\u4e00\u6b65\u662f\u521b\u5efa\u4e00\u4e2a\u521b\u4e16\u8d26\u6237\u5e76\u4e3a\u5176\u5206\u914d\u521d\u59cb\u4f59\u989d\u3002\u6211\u4eec\u5c06\u4f7f\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"core"),"\u5305\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"GenesisAccount"),"\u7c7b\u578b\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'balance := new(big.Int)\nbalance.SetString("10000000000000000000", 10) // 10 eth in wei\n\naddress := auth.From\ngenesisAlloc := map[common.Address]core.GenesisAccount{\n  address: {\n    Balance: balance,\n  },\n}\n')),(0,i.kt)("p",null,"\u73b0\u5728\u6211\u4eec\u5c06\u521b\u4e16\u5206\u914d\u7ed3\u6784\u4f53\u548c\u914d\u7f6e\u597d\u7684\u6c7d\u6cb9\u4e0a\u9650\u4f20\u7ed9",(0,i.kt)("inlineCode",{parentName:"p"},"account/abi/bind/backends"),"\u5305\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"NewSimulatedBackend"),"\u65b9\u6cd5\uff0c\u8be5\u65b9\u6cd5\u5c06\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6a21\u62df\u4ee5\u592a\u574a\u5ba2\u6237\u7aef\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"blockGasLimit := uint64(4712388)\nclient := backends.NewSimulatedBackend(genesisAlloc, blockGasLimit)\n")),(0,i.kt)("p",null,"\u60a8\u53ef\u4ee5\u50cf\u5f80\u5e38\u4e00\u6837\u4f7f\u7528\u6b64\u5ba2\u6237\u7aef\u3002\u4f5c\u4e3a\u4e00\u4e2a\u793a\u4f8b\uff0c\u6211\u4eec\u5c06\u6784\u9020\u4e00\u4e2a\u65b0\u7684\u4ea4\u6613\u5e76\u8fdb\u884c\u5e7f\u64ad\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'fromAddress := auth.From\nnonce, err := client.PendingNonceAt(context.Background(), fromAddress)\nif err != nil {\n  log.Fatal(err)\n}\n\nvalue := big.NewInt(1000000000000000000) // in wei (1 eth)\ngasLimit := uint64(21000)                // in units\ngasPrice, err := client.SuggestGasPrice(context.Background())\nif err != nil {\n  log.Fatal(err)\n}\n\ntoAddress := common.HexToAddress("0x4592d8f8d7b001e72cb26a73e4fa1806a51ac79d")\nvar data []byte\ntx := types.NewTransaction(nonce, toAddress, value, gasLimit, gasPrice, data)\nchainID := big.NewInt(1)\nsignedTx, err := types.SignTx(tx, types.NewEIP155Signer(chainID), privateKey)\nif err != nil {\n  log.Fatal(err)\n}\n\nerr = client.SendTransaction(context.Background(), signedTx)\nif err != nil {\n  log.Fatal(err)\n}\n\nfmt.Printf("tx sent: %s\\n", signedTx.Hash().Hex()) // tx sent: 0xec3ceb05642c61d33fa6c951b54080d1953ac8227be81e7b5e4e2cfed69eeb51\n')),(0,i.kt)("p",null,"\u5230\u73b0\u5728\u4e3a\u6b62\uff0c\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u4ea4\u6613\u4f55\u65f6\u624d\u4f1a\u88ab\u5f00\u91c7\u3002\u4e3a\u4e86\u201c\u5f00\u91c7\u201d\u5b83\uff0c\u60a8\u8fd8\u5fc5\u987b\u505a\u4e00\u4ef6\u989d\u5916\u7684\u4e8b\u60c5\uff0c\u5728\u5ba2\u6237\u7aef\u8c03\u7528",(0,i.kt)("inlineCode",{parentName:"p"},"Commit"),"\u63d0\u4ea4\u65b0\u5f00\u91c7\u7684\u533a\u5757\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"client.Commit()\n")),(0,i.kt)("p",null,"\u73b0\u5728\u60a8\u53ef\u4ee5\u83b7\u53d6\u4ea4\u6613\u6536\u636e\u5e76\u770b\u89c1\u5176\u5df2\u88ab\u5904\u7406\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'receipt, err := client.TransactionReceipt(context.Background(), signedTx.Hash())\nif err != nil {\n  log.Fatal(err)\n}\nif receipt == nil {\n  log.Fatal("receipt is nil. Forgot to commit?")\n}\n\nfmt.Printf("status: %v\\n", receipt.Status) // status: 1\n')),(0,i.kt)("p",null,"\u56e0\u6b64\uff0c\u8bf7\u8bb0\u4f4f\uff1a\u6a21\u62df\u5ba2\u6237\u7aef\u5141\u8bb8\u60a8\u4f7f\u7528\u6a21\u62df\u5ba2\u6237\u7aef\u7684",(0,i.kt)("inlineCode",{parentName:"p"},"Commit"),"\u65b9\u6cd5\u624b\u52a8\u5f00\u91c7\u533a\u5757\u3002"),(0,i.kt)("h3",{id:"\u5b8c\u6574\u4ee3\u7801"},"\u5b8c\u6574\u4ee3\u7801"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/mhxw/ethereum-development-with-go-book/blob/main/code/client_simulated.go"},"client_simulated.go")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n    "fmt"\n    "log"\n    "math/big"\n\n    "github.com/ethereum/go-ethereum/accounts/abi/bind"\n    "github.com/ethereum/go-ethereum/accounts/abi/bind/backends"\n    "github.com/ethereum/go-ethereum/common"\n    "github.com/ethereum/go-ethereum/core"\n    "github.com/ethereum/go-ethereum/core/types"\n    "github.com/ethereum/go-ethereum/crypto"\n)\n\nfunc main() {\n    privateKey, err := crypto.GenerateKey()\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    auth := bind.NewKeyedTransactor(privateKey)\n\n    balance := new(big.Int)\n    balance.SetString("10000000000000000000", 10) // 10 eth in wei\n\n    address := auth.From\n    genesisAlloc := map[common.Address]core.GenesisAccount{\n        address: {\n            Balance: balance,\n        },\n    }\n\n    blockGasLimit := uint64(4712388)\n    client := backends.NewSimulatedBackend(genesisAlloc, blockGasLimit)\n\n    fromAddress := auth.From\n    nonce, err := client.PendingNonceAt(context.Background(), fromAddress)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    value := big.NewInt(1000000000000000000) // in wei (1 eth)\n    gasLimit := uint64(21000)                // in units\n    gasPrice, err := client.SuggestGasPrice(context.Background())\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    toAddress := common.HexToAddress("0x4592d8f8d7b001e72cb26a73e4fa1806a51ac79d")\n    var data []byte\n    tx := types.NewTransaction(nonce, toAddress, value, gasLimit, gasPrice, data)\n\n    chainID := big.NewInt(1)\n    signedTx, err := types.SignTx(tx, types.NewEIP155Signer(chainID), privateKey)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    err = client.SendTransaction(context.Background(), signedTx)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    fmt.Printf("tx sent: %s\\n", signedTx.Hash().Hex()) // tx sent: 0xec3ceb05642c61d33fa6c951b54080d1953ac8227be81e7b5e4e2cfed69eeb51\n\n    client.Commit()\n\n    receipt, err := client.TransactionReceipt(context.Background(), signedTx.Hash())\n    if err != nil {\n        log.Fatal(err)\n    }\n    if receipt == nil {\n        log.Fatal("receipt is nil. Forgot to commit?")\n    }\n\n    fmt.Printf("status: %v\\n", receipt.Status) // status: 1\n}\n')))}p.isMDXComponent=!0}}]);